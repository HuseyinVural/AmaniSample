// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.5 (swiftlang-1300.0.31.1 clang-1300.0.29.1)
// swift-module-flags: -target x86_64-apple-ios11.0-simulator -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -module-name AmaniSDK
import AVFoundation
import Accelerate
import AudioToolbox
import CommonCrypto
import CoreLocation
import CoreMotion
import CoreNFC
import CryptoKit
import CryptoTokenKit
import Foundation
import Metal
import MetalKit
import MetalPerformanceShaders
import OpenSSL
import SafariServices
import Swift
import UIKit
import Vision
import WebKit
import _Concurrency
public struct NFCRequest : Swift.Codable {
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
public struct MrzModel : Swift.Codable {
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @available(iOS 13, macOS 10.15, *)
public class NotImplementedDG : AmaniSDK.DataGroup {
  @objc deinit
}
public enum LogLevel : Swift.Int, Swift.CaseIterable {
  case verbose
  case debug
  case info
  case warning
  case error
  public init?(rawValue: Swift.Int)
  public typealias AllCases = [AmaniSDK.LogLevel]
  public typealias RawValue = Swift.Int
  public static var allCases: [AmaniSDK.LogLevel] {
    get
  }
  public var rawValue: Swift.Int {
    get
  }
}
@_hasMissingDesignatedInitializers public class Log {
  public static var logLevel: AmaniSDK.LogLevel
  public static var storeLogs: Swift.Bool
  public static var logData: [Swift.String]
  public class func verbose(_ msg: @autoclosure () -> Swift.String)
  public class func debug(_ msg: @autoclosure () -> Swift.String)
  public class func info(_ msg: @autoclosure () -> Swift.String)
  public class func warning(_ msg: @autoclosure () -> Swift.String)
  public class func error(_ msg: @autoclosure () -> Swift.String)
  public class func clearStoredLogs()
  @objc deinit
}
@_hasMissingDesignatedInitializers public class VideoCall {
  public static let sharedInstance: AmaniSDK.VideoCall
  public func setReturnLink(url: Swift.String)
  public func start(stepId: Swift.Int = steps.front.rawValue) throws -> UIKit.UIViewController
  @objc deinit
}
public struct HTTPMethod : Swift.RawRepresentable, Swift.Equatable, Swift.Hashable {
  public static let connect: AmaniSDK.HTTPMethod
  public static let delete: AmaniSDK.HTTPMethod
  public static let get: AmaniSDK.HTTPMethod
  public static let head: AmaniSDK.HTTPMethod
  public static let options: AmaniSDK.HTTPMethod
  public static let patch: AmaniSDK.HTTPMethod
  public static let post: AmaniSDK.HTTPMethod
  public static let put: AmaniSDK.HTTPMethod
  public static let trace: AmaniSDK.HTTPMethod
  public let rawValue: Swift.String
  public init(rawValue: Swift.String)
  public typealias RawValue = Swift.String
}
@_hasMissingDesignatedInitializers public class BioLoginBuilder {
  public func setBioLoginType(type: AmaniSDK.BioLoginType) -> AmaniSDK.BioLoginBuilder
  public func setToken(token: Swift.String) -> AmaniSDK.BioLoginBuilder
  public func setSource(source: Swift.Int) -> AmaniSDK.BioLoginBuilder
  public func setComparisonAdaptere(comparison_adapter: Swift.Int) -> AmaniSDK.BioLoginBuilder
  public func setCustomer(customer_id: Swift.String) -> AmaniSDK.BioLoginBuilder
  public func setAttemptId(attempt_id: Swift.String) -> AmaniSDK.BioLoginBuilder
  public func setUrl(url: Swift.String) -> AmaniSDK.BioLoginBuilder
  public func setPoseEstimationMessages(infoMessages: [AmaniSDK.poseState : Swift.String])
  public func setPoseEstimationColors(screenConfig: [AmaniSDK.poseConfigState : Swift.String])
  public func setSelfieColor(key: AmaniSDK.configState, value: Swift.String)
  public func setSelfieMessages(key: AmaniSDK.infoState, value: Swift.String)
  public func build() -> AmaniSDK.BioLogin?
  @objc deinit
}
public protocol AmaniDelegate : AnyObject {
  func onKYCSuccess(CustomerId: Swift.Int)
  func onKYCFailed(CustomerId: Swift.Int, Rules: [[Swift.String : Swift.String]]?)
  func onTokenExpired()
  func onNoInternetConnection()
}
public enum acceptedFileTypes : Swift.String {
  case jpg
  case png
  case bmp
  case webp
  case pdf
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
public enum steps : Swift.Int {
  case front
  case back
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
@objc @_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @available(iOS 11, *)
final public class Amani : ObjectiveC.NSObject {
  public static let sharedInstance: AmaniSDK.Amani
  final public let version: Swift.String
  final public func initAmani(server: Swift.String, token: Swift.String, sharedSecret: Swift.String? = nil, customer: AmaniSDK.CustomerRequestModel, useGeoLocation: Swift.Bool = true, language: Swift.String = "tr", uploadSource: AmaniSDK.UploadSource = .KYC, completion: @escaping (AmaniSDK.CustomerResponseModel?, AmaniSDK.NetworkError?) -> ())
  final public func initAmani(server: Swift.String, token: Swift.String, sharedSecret: Swift.String? = nil, customer: AmaniSDK.CustomerRequestModel, useGeoLocation: Swift.Bool = true, language: Swift.String = "tr", uploadSource: Swift.String, completion: @escaping (AmaniSDK.CustomerResponseModel?, AmaniSDK.NetworkError?) -> ())
  final public func initAmani(server: Swift.String, userName: Swift.String, password: Swift.String, sharedSecret: Swift.String? = nil, customer: AmaniSDK.CustomerRequestModel, useGeoLocation: Swift.Bool = true, language: Swift.String = "tr", uploadSource: AmaniSDK.UploadSource = .KYC, completion: @escaping (AmaniSDK.CustomerResponseModel?, AmaniSDK.NetworkError?) -> ())
  final public func initAmani(server: Swift.String, userName: Swift.String, password: Swift.String, sharedSecret: Swift.String? = nil, customer: AmaniSDK.CustomerRequestModel, useGeoLocation: Swift.Bool = true, language: Swift.String = "tr", uploadSource: Swift.String, completion: @escaping (AmaniSDK.CustomerResponseModel?, AmaniSDK.NetworkError?) -> ())
  final public func setUploadSource(uploadSource: Swift.String)
  final public func setUploadSource(uploadSource: AmaniSDK.UploadSource)
  final public func setSharedSecret(cryptoKey: Swift.String)
  final public func setDelegate(delegate: AmaniSDK.AmaniDelegate)
  @objc deinit
}
extension AmaniSDK.Amani {
  final public func selfie() -> AmaniSDK.Selfie
  final public func autoSelfie() -> AmaniSDK.AutoSelfie
  final public func IdCapture() -> AmaniSDK.IDCapture
  @available(iOS 13, *)
  final public func scanNFC() -> AmaniSDK.ScanNFC
  final public func bioLogin() -> AmaniSDK.BioLogin
  final public func bioLoginBuilder() -> AmaniSDK.BioLoginBuilder
  final public func document() -> AmaniSDK.Document
  final public func signature() -> AmaniSDK.Signature
  final public func customerInfo() -> AmaniSDK.CustomerInfo
  final public func appConfig() -> AmaniSDK.Config
  @available(iOS 12.0, *)
  final public func poseEstimation() -> AmaniSDK.PoseEstimation
  final public func videoCall() -> AmaniSDK.VideoCall
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @available(iOS 13, macOS 10.15, *)
public class COM : AmaniSDK.DataGroup {
  public var version: Swift.String {
    get
  }
  public var unicodeVersion: Swift.String {
    get
  }
  public var dataGroupsPresent: [Swift.String] {
    get
  }
  @objc deinit
}
@_hasMissingDesignatedInitializers public class Config {
  public static let sharedInstance: AmaniSDK.Config
  public func getApplicationConfig() throws -> AmaniSDK.AppConfigModel
  public typealias fetchAppConfigCompletion = (AmaniSDK.AppConfigModel?, AmaniSDK.NetworkError?) -> ()
  public func fetchAppConfig(completion: @escaping AmaniSDK.Config.fetchAppConfigCompletion)
  public func getCountryList()
  @objc deinit
}
@available(iOS 13, macOS 10.15, *)
public enum CertificateType {
  case documentSigningCertificate
  case issuerSigningCertificate
  public static func == (a: AmaniSDK.CertificateType, b: AmaniSDK.CertificateType) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
@available(iOS 13, macOS 10.15, *)
public enum CertificateItem : Swift.String {
  case fingerprint
  case issuerName
  case subjectName
  case serialNumber
  case signatureAlgorithm
  case publicKeyAlgorithm
  case notBefore
  case notAfter
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
@available(iOS 13, macOS 10.15, *)
public class X509Wrapper {
  final public let cert: Swift.OpaquePointer
  public init?(with cert: Swift.OpaquePointer?)
  public func getItemsAsDict() -> [AmaniSDK.CertificateItem : Swift.String]
  public func certToPEM() -> Swift.String
  public func getFingerprint() -> Swift.String?
  public func getNotBeforeDate() -> Swift.String?
  public func getNotAfterDate() -> Swift.String?
  public func getSerialNumber() -> Swift.String?
  public func getSignatureAlgorithm() -> Swift.String?
  public func getPublicKeyAlgorithm() -> Swift.String?
  public func getIssuerName() -> Swift.String?
  public func getSubjectName() -> Swift.String?
  @objc deinit
}
public struct BPError {
}
@_hasMissingDesignatedInitializers public class CustomerInfo {
  public static let sharedInstance: AmaniSDK.CustomerInfo
  public func setInfo(occupation: Swift.String?, address: AmaniSDK.AddressInfo)
  public func getCustomer() -> AmaniSDK.CustomerResponseModel
  public func getCustomer(forceUpdateCallback: @escaping ((_ success: AmaniSDK.CustomerResponseModel?, _ error: AmaniSDK.NetworkError?) -> Swift.Void))
  public func upload(location: CoreLocation.CLLocation?, completion: @escaping (Swift.Bool?, [AmaniSDK.AmaniError]?) -> Swift.Void)
  @objc deinit
}
@available(iOS 13, macOS 10.15, *)
public enum NFCViewDisplayMessage {
  case requestPresentPassport
  case authenticatingWithPassport(Swift.Int)
  case readingDataGroupProgress(AmaniSDK.DataGroupId, Swift.Int)
  case error(AmaniSDK.NFCPassportReaderError)
  case successfulRead
}
@available(iOS 13, macOS 10.15, *)
extension AmaniSDK.NFCViewDisplayMessage {
  public var description: Swift.String {
    get
  }
}
public enum UploadSource : Swift.String, Swift.Codable {
  case VIDEO
  case KYC
  case PASSWORD
  case PASSWORD_UPDATE
  case PHONE_UPDATE
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
@available(iOS 13, macOS 10.15, *)
public class ASN1Item : Swift.CustomDebugStringConvertible {
  public init(line: Swift.String)
  public func getChild(_ child: Swift.Int) -> AmaniSDK.ASN1Item?
  public func getNumberOfChildren() -> Swift.Int
  public var debugDescription: Swift.String {
    get
  }
  @objc deinit
}
@available(iOS 13, macOS 10.15, *)
public class SimpleASN1DumpParser {
  public init()
  public func parse(data: Foundation.Data) throws -> AmaniSDK.ASN1Item
  public func test()
  @objc deinit
}
public struct CustomerRequestModel : Swift.Codable {
  public var name: Swift.String?
  public var email: Swift.String?
  public var phone: Swift.String?
  public var idCardNumber: Swift.String?
  public init(name: Swift.String? = nil, email: Swift.String? = nil, phone: Swift.String? = nil, idCardNumber: Swift.String)
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
@_hasMissingDesignatedInitializers public class Selfie {
  public static let sharedInstance: AmaniSDK.Selfie
  public func setType(type: Swift.String)
  public func start(stepId: Swift.Int = steps.front.rawValue, completion: @escaping (UIKit.UIImage) -> Swift.Void) throws -> UIKit.UIView?
  public func upload(location: CoreLocation.CLLocation? = nil, completion: @escaping (Swift.Bool?, [AmaniSDK.AmaniError]?) -> Swift.Void)
  @objc deinit
}
@_hasMissingDesignatedInitializers public class SignDocument {
  public func generateHMACSignature(SharedSecret: Swift.String, RequestMethod: Swift.String, RequestPath: Swift.String, RequestBody: Swift.String, algorithm: AmaniSDK.SignDocument.HMACAlgo = .SHA256) -> Swift.String
  public enum HMACAlgo {
    case MD5, SHA1, SHA224, SHA256, SHA384, SHA512
    public static func == (a: AmaniSDK.SignDocument.HMACAlgo, b: AmaniSDK.SignDocument.HMACAlgo) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
  }
  @objc deinit
}
public enum SecureMessagingSupportedAlgorithms {
  case DES
  case AES
  public static func == (a: AmaniSDK.SecureMessagingSupportedAlgorithms, b: AmaniSDK.SecureMessagingSupportedAlgorithms) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
@available(iOS 13, *)
public class SecureMessaging {
  public init(encryptionAlgorithm: AmaniSDK.SecureMessagingSupportedAlgorithms = .DES, ksenc: [Swift.UInt8], ksmac: [Swift.UInt8], ssc: [Swift.UInt8])
  @objc deinit
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @available(iOS 13, macOS 10.15, *)
public class DataGroup12 : AmaniSDK.DataGroup {
  public var issuingAuthority: Swift.String? {
    get
  }
  public var dateOfIssue: Swift.String? {
    get
  }
  public var otherPersonsDetails: Swift.String? {
    get
  }
  public var endorsementsOrObservations: Swift.String? {
    get
  }
  public var taxOrExitRequirements: Swift.String? {
    get
  }
  public var frontImage: [Swift.UInt8]? {
    get
  }
  public var rearImage: [Swift.UInt8]? {
    get
  }
  public var personalizationTime: Swift.String? {
    get
  }
  public var personalizationDeviceSerialNr: Swift.String? {
    get
  }
  @objc deinit
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @available(iOS 13, macOS 10.15, *)
public class DataGroup14 : AmaniSDK.DataGroup {
  public var securityInfos: [AmaniSDK.SecurityInfo] {
    get
  }
  @objc deinit
}
@available(iOS 13, macOS 10.15, *)
public enum NFCPassportReaderError : Swift.Error {
  case ResponseError(Swift.String, Swift.UInt8, Swift.UInt8)
  case InvalidResponse
  case UnexpectedError
  case NFCNotSupported
  case NoConnectedTag
  case D087Malformed
  case InvalidResponseChecksum
  case MissingMandatoryFields
  case CannotDecodeASN1Length
  case InvalidASN1Value
  case UnableToProtectAPDU
  case UnableToUnprotectAPDU
  case UnsupportedDataGroup
  case DataGroupNotRead
  case UnknownTag
  case UnknownImageFormat
  case NotImplemented
  case TagNotValid
  case ConnectionError
  case UserCanceled
  case InvalidMRZKey
  case MoreThanOneTagFound
  case InvalidHashAlgorithmSpecified
  case InvalidDataPassed(Swift.String)
  case NotYetSupported(Swift.String)
}
@available(iOS 13, macOS 10.15, *)
extension AmaniSDK.NFCPassportReaderError : Foundation.LocalizedError {
  public var errorDescription: Swift.String? {
    get
  }
}
@available(iOS 13, macOS 10.15, *)
public enum OpenSSLError : Swift.Error {
  case UnableToGetX509CertificateFromPKCS7(Swift.String)
  case UnableToVerifyX509CertificateForSOD(Swift.String)
  case VerifyAndReturnSODEncapsulatedData(Swift.String)
  case UnableToReadECPublicKey(Swift.String)
  case UnableToExtractSignedDataFromPKCS7(Swift.String)
  case VerifySignedAttributes(Swift.String)
  case UnableToParseASN1(Swift.String)
  case UnableToDecryptRSASignature(Swift.String)
}
@available(iOS 13, macOS 10.15, *)
extension AmaniSDK.OpenSSLError : Foundation.LocalizedError {
  public var errorDescription: Swift.String? {
    get
  }
}
public enum PassiveAuthenticationError : Swift.Error {
  case UnableToParseSODHashes(Swift.String)
  case InvalidDataGroupHash(Swift.String)
  case SODMissing(Swift.String)
}
extension AmaniSDK.PassiveAuthenticationError : Foundation.LocalizedError {
  public var errorDescription: Swift.String? {
    get
  }
}
@_hasMissingDesignatedInitializers @available(iOS 13, macOS 10.15, *)
public class OpenSSLUtils {
  public static func getOpenSSLError() -> Swift.String
  @available(iOS 13, macOS 10.15, *)
  public static func getPublicKeyData(from key: Swift.OpaquePointer) -> [Swift.UInt8]?
  @available(iOS 13, macOS 10.15, *)
  public static func decodePublicKeyFromBytes(pubKeyData: [Swift.UInt8], params: Swift.OpaquePointer) -> Swift.OpaquePointer?
  public static func computeSharedSecret(privateKeyPair: Swift.OpaquePointer, publicKey: Swift.OpaquePointer) -> [Swift.UInt8]
  @objc deinit
}
public enum infoState : Swift.String {
  case faceTooBig
  case faceTooSmall
  case faceIsOk
  case notInArea
  case completed
  case captureDescription
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
public enum configState : Swift.String {
  case ovalBorderColor
  case ovalBorderSuccessColor
  case primaryButtonBackgroundColor
  case appFontColor
  case appBackgroundColor
  case countTimer
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
public struct CustomerResponseModel : Swift.Codable {
  public var name: Swift.String?
  public var email: Swift.String?
  public var phone: Swift.String?
  public var companyID: Swift.Int?
  public var status: Swift.String?
  public var rules: [AmaniSDK.KYCRuleModel]?
  public var missingRules: [AmaniSDK.KYCRuleModel]?
  public var token: Swift.String?
  public var idCardNumber: Swift.String?
  public var id: Swift.Int?
  public var occupation: Swift.String?
  public var address: AmaniSDK.AddressInfo?
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
public struct AddressInfo : Swift.Codable {
  public var city: Swift.String?
  public var address: Swift.String?
  public var province: Swift.String?
  public init(city: Swift.String? = nil, address: Swift.String? = nil, province: Swift.String? = nil)
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
public enum DocumentStatus : Swift.String, Swift.CaseIterable, Swift.Codable {
  case NOT_UPLOADED
  case PENDING_REVIEW
  case PROCESSING
  case REJECTED
  case AUTOMATICALLY_REJECTED
  case APPROVED
  public init?(rawValue: Swift.String)
  public typealias AllCases = [AmaniSDK.DocumentStatus]
  public typealias RawValue = Swift.String
  public static var allCases: [AmaniSDK.DocumentStatus] {
    get
  }
  public var rawValue: Swift.String {
    get
  }
}
@_hasMissingDesignatedInitializers public class mkNetwork {
  public func request<T, R>(url: Swift.String, method: AmaniSDK.HTTPMethod, parameters: T? = nil, headers: [Swift.String : Swift.String]? = nil, queryParams: [Swift.String : Swift.String]? = nil, signKey: Swift.String? = nil, ResultType: R.Type, Response: @escaping (Swift.Result<R, Swift.Error>) -> ()) where T : Swift.Decodable, T : Swift.Encodable, R : Swift.Decodable, R : Swift.Encodable
  public func request<T>(url: Swift.String, method: AmaniSDK.HTTPMethod, parameters: T? = nil, headers: [Swift.String : Swift.String]? = nil, queryParams: [Swift.String : Swift.String]? = nil, signKey: Swift.String? = nil, Response: @escaping (Swift.Result<AmaniSDK.ResponseData, Swift.Error>) -> ()) where T : Swift.Decodable, T : Swift.Encodable
  public func multiPartRequest<T>(url: Swift.String, method: AmaniSDK.HTTPMethod, parameters: T?, headers: [Swift.String : Swift.String]? = nil, queryParams: [Swift.String : Swift.String]? = nil, signKey: Swift.String? = nil, Response: @escaping (Swift.Result<AmaniSDK.ResponseData, Swift.Error>) -> ()) where T : Swift.Decodable, T : Swift.Encodable
  public func multiPartRequest<T, R>(url: Swift.String, method: AmaniSDK.HTTPMethod, parameters: T?, headers: [Swift.String : Swift.String]? = nil, queryParams: [Swift.String : Swift.String]? = nil, signKey: Swift.String? = nil, ResultType: R.Type, Response: @escaping (Swift.Result<R, Swift.Error>) -> ()) where T : Swift.Decodable, T : Swift.Encodable, R : Swift.Decodable, R : Swift.Encodable
  @objc deinit
}
public struct NviModel : Swift.Codable {
  public var documentNo: Swift.String?
  public var dateOfBirth: Swift.String?
  public var dateOfExpire: Swift.String?
  public var documentNoCD: Swift.String?
  public var dateOfBirthCD: Swift.String?
  public var dateOfExpireCD: Swift.String?
  public init(mrzModel: AmaniSDK.MrzModel)
  public init(documentNo: Swift.String, dateOfBirth: Swift.String, dateOfExpire: Swift.String)
  public func getMRZ() -> Swift.String
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
public struct AppConfigModel : Swift.Codable {
  public var generalconfigs: AmaniSDK.GeneralConfig?
  public var stepConfig: [AmaniSDK.StepConfig]?
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
public struct GeneralConfig : Swift.Codable {
  public var appBackground: Swift.String?
  public var appFontColor: Swift.String?
  public var topBarBackground: Swift.String?
  public var topBarFontColor: Swift.String?
  public var language: Swift.String?
  public var errorIconColor: Swift.String?
  public var successIconColor: Swift.String?
  public var primaryButtonTextColor: Swift.String?
  public var primaryButtonBorderColor: Swift.String?
  public var primaryButtonBackgroundColor: Swift.String?
  public var secondaryButtonTextColor: Swift.String?
  public var secondaryButtonBorderColor: Swift.String?
  public var secondaryButtonBackgroundColor: Swift.String?
  public var confirmText: Swift.String?
  public var tryAgainText: Swift.String?
  public var cropManuallyText: Swift.String?
  public var mainTitleText: Swift.String?
  public var continueText: Swift.String?
  public var cropAndUpoloadText: Swift.String?
  public var okText: Swift.String?
  public var hideLogo: Swift.Bool?
  public var skipConfirmationScreen: Swift.Bool?
  public var buttonRadius: Swift.Int?
  public var successTitle: Swift.String?
  public var successHeaderText: Swift.String?
  public var successInfo1Text: Swift.String?
  public var successInfo2Text: Swift.String?
  public var somethingGoesWrongText: Swift.String?
  public var permissionDeniedText: Swift.String?
  public var permissionDeniedInfoText: Swift.String?
  public var openSettingsText: Swift.String?
  public var loaderColor: Swift.String?
  public var mrzKeyNotValidText: Swift.String?
  public var nfcReadsuccessfullyDescription: Swift.String?
  public var nfcResponseError: Swift.String?
  public var nfcConnectionError: Swift.String?
  public var nfcMoreThanOneTagFound: Swift.String?
  public var nfcTagNotValid: Swift.String?
  public var nfcSomethingGoesWrongText: Swift.String?
  public var onScreenButtonTextColor: Swift.String?
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
public struct ButtonColorModel : Swift.Codable {
  public var approved: Swift.String?
  public var rejected: Swift.String?
  public var processing: Swift.String?
  public var notUloaded: Swift.String?
  public var pendingReview: Swift.String?
  public var autoRejected: Swift.String?
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
public struct ButtonTextModel : Swift.Codable {
  public var approved: Swift.String?
  public var rejected: Swift.String?
  public var processing: Swift.String?
  public var notUloaded: Swift.String?
  public var pendingReview: Swift.String?
  public var autoRejected: Swift.String?
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
public struct DocumentStepModel : Swift.Codable {
  public var captureTitle: Swift.String?
  public var confirmationTitle: Swift.String?
  public var captureDescription: Swift.String?
  public var confirmationDescription: Swift.String?
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
public struct DocumentVersion : Swift.Codable {
  public var nfc: Swift.Bool?
  public var type: Swift.String?
  public var steps: [AmaniSDK.DocumentStepModel]?
  public var title: Swift.String?
  public var manualCrop: Swift.Bool?
  public var aspectRatio: Swift.Float?
  public var cameraFacing: Swift.String?
  public var photoLibrary: Swift.Bool?
  public var docID: Swift.String!
  public var nfcOnly: Swift.Bool?
  public var maxAttempt: Swift.Int?
  public var autocapture: Swift.Bool?
  public var nfcFailedDescription: Swift.String?
  public var nfcTitle: Swift.String?
  public var nfcFailed: Swift.String?
  public var nfcDescription1: Swift.String?
  public var nfcDescription2: Swift.String?
  public var nfcDescription3: Swift.String?
  public var mrzReadErrorText: Swift.String?
  public var selfieType: Swift.Int?
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
public struct StepConfig : Swift.Codable {
  public var id: Swift.Int?
  public var title: Swift.String?
  public var phase: Swift.Int?
  public var buttonText: AmaniSDK.ButtonTextModel?
  public var buttonColor: AmaniSDK.ButtonColorModel?
  public var buttonTextColor: AmaniSDK.ButtonTextColor?
  public var maxAttempt: Swift.Int?
  public var documentSelectionTitle: Swift.String?
  public var documentSelectionDescription: Swift.String?
  public var documentGlaredText: Swift.String?
  public var documentBlurredText: Swift.String?
  public var documentNotCroppedText: Swift.String?
  public var documents: [AmaniSDK.DocumentModel]?
  public var formID: Swift.Int?
  public var mandatoryStepIDs: [Swift.Int]?
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
public struct DocumentModel : Swift.Codable {
  public var id: Swift.String?
  public var versions: [AmaniSDK.DocumentVersion]?
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
public struct ButtonTextColor : Swift.Codable {
  public var approved: Swift.String?
  public var rejected: Swift.String?
  public var processing: Swift.String?
  public var notUloaded: Swift.String?
  public var pendingReview: Swift.String?
  public var autoRejected: Swift.String?
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
@_hasMissingDesignatedInitializers public class BioLogin {
  public static let sharedInstance: AmaniSDK.BioLogin
  public func setType(type: Swift.String)
  public func setParams(server: Swift.String, token: Swift.String, customer_id: Swift.String, source: Swift.Int = 3, comparison_adapter: Swift.Int = 2, attempt_id: Swift.String, biologintype: AmaniSDK.BioLoginType = .autoSelfie)
  public func setPoseEstimationMessages(infoMessages: [AmaniSDK.poseState : Swift.String])
  public func setPoseEstimationColors(screenConfig: [AmaniSDK.poseConfigState : Swift.String])
  public func setPoseEstimationMainGuideImages(guideImages: [AmaniSDK.mainGuideImages : UIKit.UIImage])
  public func setPoseEstimationSecondaryImages(guideImages: [AmaniSDK.secondaryGuideImages : UIKit.UIImage])
  public func setSelfieColor(key: AmaniSDK.configState, value: Swift.String)
  public func setSelfieMessages(key: AmaniSDK.infoState, value: Swift.String)
  public func start(stepId: Swift.Int = steps.front.rawValue, completion: @escaping (UIKit.UIImage) -> Swift.Void) throws -> UIKit.UIView?
  public func upload(location: CoreLocation.CLLocation? = nil, completion: @escaping (Swift.Bool?, [AmaniSDK.AmaniError]?) -> Swift.Void)
  @objc deinit
}
public enum poseState : Swift.String {
  case faceTooBig
  case faceTooSmall
  case faceIsOk
  case closedEyes
  case notInArea
  case wrongPose
  case holdPhoneVertically
  case turnRight
  case turnLeft
  case turnUp
  case turnDown
  case lookStraight
  case next
  case completed
  case errorMessage
  case tryAgain
  case errorTitle
  case confirm
  case captureDescription
  case informationScreenDesc1
  case informationScreenDesc2
  case informationScreenTitle
  case descriptionHeader
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
public enum poseConfigState : Swift.String {
  case ovalBorderColor
  case ovalBorderSuccessColor
  case primaryButtonBackgroundColor
  case primaryButtonTextColor
  case primaryButtonBorderColor
  case secondaryButtonBackgroundColor
  case secondaryButtonTextColor
  case secondaryButtonBorderColor
  case buttonRadius
  case appFontColor
  case appBackgroundColor
  case poseCount
  case secondaryGuideVisibility
  case mainGuideVisibility
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
public enum mainGuideImages {
  case mainGuideUp
  case mainGuideDown
  case mainGuideLeft
  case mainGuideRight
  case mainGuideStraight
  public static func == (a: AmaniSDK.mainGuideImages, b: AmaniSDK.mainGuideImages) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
public enum secondaryGuideImages {
  case secondaryGuideUp
  case secondaryGuideDown
  case secondaryGuideLeft
  case secondaryGuideRight
  public static func == (a: AmaniSDK.secondaryGuideImages, b: AmaniSDK.secondaryGuideImages) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
@_hasMissingDesignatedInitializers @available(iOS 13, macOS 10.15, *)
public class CardAccess {
  public var securityInfos: [AmaniSDK.SecurityInfo] {
    get
  }
  @objc deinit
}
@_hasMissingDesignatedInitializers @available(iOS 13, macOS 10.15, *)
public class DataGroup {
  public var datagroupType: AmaniSDK.DataGroupId
  public var body: [Swift.UInt8] {
    get
  }
  public var data: [Swift.UInt8] {
    get
  }
  public func hash(_ hashAlgorythm: Swift.String) -> [Swift.UInt8]
  @objc deinit
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @available(iOS 13, macOS 10.15, *)
public class DataGroup7 : AmaniSDK.DataGroup {
  public var imageData: [Swift.UInt8] {
    get
  }
  @objc deinit
}
@_hasMissingDesignatedInitializers public class Signature {
  public typealias VoidFnCallback = (() -> ())
  public typealias OnConfirmPressed = ((UIKit.UIImage, Swift.Int) -> ())
  public static let sharedInstance: AmaniSDK.Signature
  public func getCountofSignatures() -> Swift.Int
  public func setViewArea(viewArea: CoreGraphics.CGRect)
  public func setConfirmButtonCallback(callback: @escaping AmaniSDK.Signature.VoidFnCallback)
  public func setOnConfirmPressedCallback(callback: @escaping AmaniSDK.Signature.OnConfirmPressed)
  public func capture()
  public func clear()
  public func start(stepId: Swift.Int = 1, completion: @escaping (UIKit.UIImage) -> Swift.Void) throws -> UIKit.UIView?
  public func upload(location: CoreLocation.CLLocation? = nil, completion: @escaping (Swift.Bool?, [AmaniSDK.AmaniError]?) -> Swift.Void)
  @objc deinit
}
@_hasMissingDesignatedInitializers @available(iOS 13, macOS 10.15, *)
public class ChipAuthenticationInfo : AmaniSDK.SecurityInfo {
  override public func getObjectIdentifier() -> Swift.String
  override public func getProtocolOIDString() -> Swift.String
  public func getKeyId() -> Swift.Int
  public static func toKeyAgreementAlgorithm(oid: Swift.String) throws -> Swift.String
  public static func toCipherAlgorithm(oid: Swift.String) throws -> Swift.String
  public static func toKeyLength(oid: Swift.String) throws -> Swift.Int
  @objc deinit
}
@objc @available(iOS 13, *)
public class PassportReader : ObjectiveC.NSObject {
  public var passiveAuthenticationUsesOpenSSL: Swift.Bool
  public init(logLevel: AmaniSDK.LogLevel = .error, masterListURL: Foundation.URL? = nil)
  public func setMasterListURL(_ masterListURL: Foundation.URL)
  public func overrideNFCDataAmountToRead(amount: Swift.Int)
  public func readPassport(mrzKey: Swift.String, tags: [AmaniSDK.DataGroupId] = [], skipSecureElements: Swift.Bool = true, customDisplayMessage: ((AmaniSDK.NFCViewDisplayMessage) -> Swift.String?)? = nil, completed: @escaping (AmaniSDK.NFCPassportModel?, AmaniSDK.NFCPassportReaderError?) -> ())
  @objc deinit
}
@available(iOS 13, *)
extension AmaniSDK.PassportReader : CoreNFC.NFCTagReaderSessionDelegate {
  public func tagReaderSessionDidBecomeActive(_ session: CoreNFC.NFCTagReaderSession)
  public func tagReaderSession(_ session: CoreNFC.NFCTagReaderSession, didInvalidateWithError error: Swift.Error)
  public func tagReaderSession(_ session: CoreNFC.NFCTagReaderSession, didDetect tags: [CoreNFC.NFCTag])
}
@available(iOS 13, macOS 10.15, *)
public enum DocTypeEnum : Swift.String {
  case TD1
  case TD2
  case OTHER
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @available(iOS 13, macOS 10.15, *)
public class DataGroup1 : AmaniSDK.DataGroup {
  public var elements: [Swift.String : Swift.String] {
    get
  }
  @objc deinit
}
@_hasMissingDesignatedInitializers @available(iOS 13, macOS 10.15, *)
public class ChipAuthenticationPublicKeyInfo : AmaniSDK.SecurityInfo {
  override public func getObjectIdentifier() -> Swift.String
  override public func getProtocolOIDString() -> Swift.String
  public func getKeyId() -> Swift.Int
  @objc deinit
}
@available(iOS 13, macOS 10.15, *)
public struct DataGroupHash {
  public var id: Swift.String
  public var sodHash: Swift.String
  public var computedHash: Swift.String
  public var match: Swift.Bool
}
public struct KYCRuleModel : Swift.Codable {
  public var id: Swift.Int?
  public var title: Swift.String?
  public var phase: Swift.Int?
  public var documentClasses: [Swift.String]?
  public var sortOrder: Swift.Int?
  public var status: Swift.String?
  public var attempt: Swift.Int?
  public var errors: [AmaniSDK.errorModel]?
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
public struct errorModel : Swift.Codable {
  public var error_code: Swift.Int?
  public var error_message: Swift.String?
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
@available(iOS 13, *)
public class PACEHandler {
  public init(cardAccess: AmaniSDK.CardAccess, tagReader: AmaniSDK.TagReader) throws
  public func doPACE(mrzKey: Swift.String, completed: @escaping (Swift.Bool) -> ())
  @objc deinit
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @available(iOS 13, macOS 10.15, *)
public class DataGroup15 : AmaniSDK.DataGroup {
  public var rsaPublicKey: Swift.OpaquePointer? {
    get
  }
  public var ecdsaPublicKey: Swift.OpaquePointer? {
    get
  }
  @objc deinit
}
public struct FileWithType {
  public init(data: Foundation.Data, dataType: Swift.String)
}
public enum PassportAuthenticationStatus {
  case notDone
  case success
  case failed
  public static func == (a: AmaniSDK.PassportAuthenticationStatus, b: AmaniSDK.PassportAuthenticationStatus) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
@available(iOS 13, macOS 10.15, *)
public class NFCPassportModel {
  public var documentType: Swift.String {
    get
  }
  public var documentSubType: Swift.String {
    get
  }
  public var personalNumber: Swift.String {
    get
  }
  public var documentNumber: Swift.String {
    get
  }
  public var issuingAuthority: Swift.String {
    get
  }
  public var documentExpiryDate: Swift.String {
    get
  }
  public var dateOfBirth: Swift.String {
    get
  }
  public var gender: Swift.String {
    get
  }
  public var nationality: Swift.String {
    get
  }
  public var lastName: Swift.String {
    get
  }
  public var firstName: Swift.String {
    get
  }
  public var passportMRZ: Swift.String {
    get
  }
  public var placeOfBirth: Swift.String? {
    get
  }
  public var residenceAddress: Swift.String? {
    get
  }
  public var phoneNumber: Swift.String? {
    get
  }
  public var documentSigningCertificate: AmaniSDK.X509Wrapper? {
    get
  }
  public var countrySigningCertificate: AmaniSDK.X509Wrapper? {
    get
  }
  public var LDSVersion: Swift.String {
    get
  }
  public var dataGroupsPresent: [Swift.String] {
    get
  }
  public var dataGroupsAvailable: [AmaniSDK.DataGroupId] {
    get
  }
  public var dataGroupsRead: [AmaniSDK.DataGroupId : AmaniSDK.DataGroup] {
    get
  }
  public var dataGroupHashes: [AmaniSDK.DataGroupId : AmaniSDK.DataGroupHash] {
    get
  }
  public var cardAccess: AmaniSDK.CardAccess? {
    get
  }
  public var BACStatus: AmaniSDK.PassportAuthenticationStatus {
    get
  }
  public var PACEStatus: AmaniSDK.PassportAuthenticationStatus {
    get
  }
  public var chipAuthenticationStatus: AmaniSDK.PassportAuthenticationStatus {
    get
  }
  public var passportCorrectlySigned: Swift.Bool {
    get
  }
  public var documentSigningCertificateVerified: Swift.Bool {
    get
  }
  public var passportDataNotTampered: Swift.Bool {
    get
  }
  public var activeAuthenticationPassed: Swift.Bool {
    get
  }
  public var activeAuthenticationChallenge: [Swift.UInt8] {
    get
  }
  public var activeAuthenticationSignature: [Swift.UInt8] {
    get
  }
  public var verificationErrors: [Swift.Error] {
    get
  }
  public var isPACESupported: Swift.Bool {
    get
  }
  public var isChipAuthenticationSupported: Swift.Bool {
    get
  }
  public var passportImage: UIKit.UIImage? {
    get
  }
  public var signatureImage: UIKit.UIImage? {
    get
  }
  public var activeAuthenticationSupported: Swift.Bool {
    get
  }
  public init()
  public init(from dump: [Swift.String : Swift.String])
  public func addDataGroup(_ id: AmaniSDK.DataGroupId, dataGroup: AmaniSDK.DataGroup)
  public func getDataGroup(_ id: AmaniSDK.DataGroupId) -> AmaniSDK.DataGroup?
  public func dumpPassportData(selectedDataGroups: [AmaniSDK.DataGroupId], includeActiveAuthenticationData: Swift.Bool = false) -> [Swift.String : Swift.String]
  public func getHashesForDatagroups(hashAlgorythm: Swift.String) -> [AmaniSDK.DataGroupId : [Swift.UInt8]]
  public func verifyPassport(masterListURL: Foundation.URL?, useCMSVerification: Swift.Bool = false)
  public func verifyActiveAuthentication(challenge: [Swift.UInt8], signature: [Swift.UInt8])
  @objc deinit
}
extension UIKit.UINavigationController {
  @_Concurrency.MainActor(unsafe) @objc override dynamic open var shouldAutorotate: Swift.Bool {
    @_Concurrency.MainActor(unsafe) @objc get
  }
}
@_hasMissingDesignatedInitializers public class AutoSelfie {
  public static let sharedInstance: AmaniSDK.AutoSelfie
  public func setType(type: Swift.String)
  public func setManualCropTimeout(Timeout: Swift.Int)
  public func setInfoMessages(infoMessages: [AmaniSDK.infoState : Swift.String])
  public func setScreenConfig(screenConfig: [AmaniSDK.configState : Swift.String])
  public func start(stepId: Swift.Int = steps.front.rawValue, completion: @escaping (UIKit.UIImage) -> Swift.Void) throws -> UIKit.UIView?
  public func upload(location: CoreLocation.CLLocation? = nil, completion: @escaping (Swift.Bool?, [AmaniSDK.AmaniError]?) -> Swift.Void)
  @objc deinit
}
public enum DocumentTypes : Swift.String {
  case Selfie
  case TurkishIdOld
  case TurkishIdNew
  case TurkishPassportOld
  case TurkishPassportNew
  case TurkishDrivingLicanceNew
  case TurkishDrivingLicanceOld
  case NFCDocument
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
public struct ClientInfoModel {
  public var serverURL: Swift.String!
  public var appKey: Swift.String!
  public var appPwd: Swift.String!
  public var appToken: Swift.String!
  public var customer: AmaniSDK.CustomerRequestModel!
  public var nviData: AmaniSDK.NviModel?
  public init(serverURL: Swift.String, appKey: Swift.String, appPwd: Swift.String, customer: AmaniSDK.CustomerRequestModel, nviData: AmaniSDK.NviModel? = nil)
  public init(serverURL: Swift.String, appToken: Swift.String, customer: AmaniSDK.CustomerRequestModel, nviData: AmaniSDK.NviModel? = nil)
}
public enum BioLoginType : Swift.String {
  case autoSelfie
  case manualSelfie
  case poseEstimation
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
@available(iOS 13, *)
public class BACHandler {
  public var ksenc: [Swift.UInt8]
  public var ksmac: [Swift.UInt8]
  public var kifd: [Swift.UInt8]
  public init()
  public init(tagReader: AmaniSDK.TagReader)
  public func performBACAndGetSessionKeys(mrzKey: Swift.String, completed: @escaping (_ error: AmaniSDK.NFCPassportReaderError?) -> ())
  public func sessionKeys(data: [Swift.UInt8]) throws -> ([Swift.UInt8], [Swift.UInt8], [Swift.UInt8])
  @objc deinit
}
@available(iOS 13, macOS 10.15, *)
public func AESEncrypt(key: [Swift.UInt8], message: [Swift.UInt8], iv: [Swift.UInt8]) -> [Swift.UInt8]
@available(iOS 13, macOS 10.15, *)
public func AESDecrypt(key: [Swift.UInt8], message: [Swift.UInt8], iv: [Swift.UInt8]) -> [Swift.UInt8]
@available(iOS 13, macOS 10.15, *)
public func AESECBEncrypt(key: [Swift.UInt8], message: [Swift.UInt8]) -> [Swift.UInt8]
@available(iOS 13, macOS 10.15, *)
public func tripleDESEncrypt(key: [Swift.UInt8], message: [Swift.UInt8], iv: [Swift.UInt8]) -> [Swift.UInt8]
@available(iOS 13, macOS 10.15, *)
public func tripleDESDecrypt(key: [Swift.UInt8], message: [Swift.UInt8], iv: [Swift.UInt8]) -> [Swift.UInt8]
@available(iOS 13, macOS 10.15, *)
public func DESEncrypt(key: [Swift.UInt8], message: [Swift.UInt8], iv: [Swift.UInt8], options: Swift.UInt32 = 0) -> [Swift.UInt8]
@available(iOS 13, macOS 10.15, *)
public func DESDecrypt(key: [Swift.UInt8], message: [Swift.UInt8], iv: [Swift.UInt8], options: Swift.UInt32 = 0) -> [Swift.UInt8]
@available(iOS 13, macOS 10.15, *)
public enum DataGroupId : Swift.Int, Swift.CaseIterable {
  case COM
  case DG1
  case DG2
  case DG3
  case DG4
  case DG5
  case DG6
  case DG7
  case DG8
  case DG9
  case DG10
  case DG11
  case DG12
  case DG13
  case DG14
  case DG15
  case DG16
  case SOD
  case Unknown
  public func getName() -> Swift.String
  public static func getIDFromName(name: Swift.String) -> AmaniSDK.DataGroupId
  public init?(rawValue: Swift.Int)
  public typealias AllCases = [AmaniSDK.DataGroupId]
  public typealias RawValue = Swift.Int
  public static var allCases: [AmaniSDK.DataGroupId] {
    get
  }
  public var rawValue: Swift.Int {
    get
  }
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @available(iOS 13, macOS 10.15, *)
public class DataGroup11 : AmaniSDK.DataGroup {
  public var fullName: Swift.String? {
    get
  }
  public var personalNumber: Swift.String? {
    get
  }
  public var dateOfBirth: Swift.String? {
    get
  }
  public var placeOfBirth: Swift.String? {
    get
  }
  public var address: Swift.String? {
    get
  }
  public var telephone: Swift.String? {
    get
  }
  public var profession: Swift.String? {
    get
  }
  public var title: Swift.String? {
    get
  }
  public var personalSummary: Swift.String? {
    get
  }
  public var proofOfCitizenship: Swift.String? {
    get
  }
  public var tdNumbers: Swift.String? {
    get
  }
  public var custodyInfo: Swift.String? {
    get
  }
  @objc deinit
}
@_hasMissingDesignatedInitializers @available(iOS 13, *)
public class ScanNFC {
  public static let sharedInstance: AmaniSDK.ScanNFC
  public func setType(type: Swift.String)
  public func setIcons(newReadIcon: Swift.Character = "🟢", newBlankIcon: Swift.Character = "⚪️")
  public func start(completion: @escaping ((AmaniSDK.NFCRequest?, AmaniSDK.AmaniError?) -> Swift.Void)) -> UIKit.UIView?
  public func start(imageBase64: Swift.String, completion: @escaping ((AmaniSDK.NFCRequest?, AmaniSDK.AmaniError?) -> Swift.Void))
  public func start(nviData: AmaniSDK.NviModel, completion: @escaping ((AmaniSDK.NFCRequest?, AmaniSDK.AmaniError?) -> Swift.Void)) throws
  public func upload(location: CoreLocation.CLLocation? = nil, completion: @escaping (Swift.Bool?, [AmaniSDK.AmaniError]?) -> Swift.Void)
  @objc deinit
}
@_hasMissingDesignatedInitializers public class ImageCheck {
  public func blurCheck(image: CoreGraphics.CGImage, blurVariance: Swift.Int = 5) -> Swift.Bool
  @objc deinit
}
@_hasMissingDesignatedInitializers @available(iOS 12.0, *)
public class PoseEstimation {
  public static let sharedInstance: AmaniSDK.PoseEstimation
  public func setType(type: Swift.String)
  public func setManualCropTimeout(Timeout: Swift.Int)
  public func setInfoMessages(infoMessages: [AmaniSDK.poseState : Swift.String])
  public func setScreenConfig(screenConfig: [AmaniSDK.poseConfigState : Swift.String])
  public func setMainGuideImages(guideImages: [AmaniSDK.mainGuideImages : UIKit.UIImage])
  public func setSecondaryGuideImages(guideImages: [AmaniSDK.secondaryGuideImages : UIKit.UIImage])
  public func setOnFailedAttemptCallback(callback: @escaping AmaniSDK.failedAttemptCallback)
  public func start(stepId: Swift.Int = steps.front.rawValue, completion: @escaping (UIKit.UIImage) -> Swift.Void) throws -> UIKit.UIView?
  public func upload(location: CoreLocation.CLLocation? = nil, completion: @escaping (Swift.Bool?, [AmaniSDK.AmaniError]?) -> Swift.Void)
  @objc deinit
}
public struct AmaniError : Swift.Codable, Swift.Error {
  public var error_code: Swift.Int!
  public var error_message: Swift.String?
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
public struct NetworkError : Swift.Codable, Swift.Error {
  public var error_code: Swift.Int!
  public var error_message: Swift.String?
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
public struct ResponseData {
  public var statusCode: Swift.Int
  public var data: Foundation.Data
}
public typealias HTTPHeaders = [Swift.String : Swift.String]
public enum PACEMappingType {
  case GM
  case IM
  case CAM
  public static func == (a: AmaniSDK.PACEMappingType, b: AmaniSDK.PACEMappingType) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
@_hasMissingDesignatedInitializers @available(iOS 13, macOS 10.15, *)
public class PACEInfo : AmaniSDK.SecurityInfo {
  public static let PARAM_ID_GFP_1024_160: Swift.Int
  public static let PARAM_ID_GFP_2048_224: Swift.Int
  public static let PARAM_ID_GFP_2048_256: Swift.Int
  public static let PARAM_ID_ECP_NIST_P192_R1: Swift.Int
  public static let PARAM_ID_ECP_BRAINPOOL_P192_R1: Swift.Int
  public static let PARAM_ID_ECP_NIST_P224_R1: Swift.Int
  public static let PARAM_ID_ECP_BRAINPOOL_P224_R1: Swift.Int
  public static let PARAM_ID_ECP_NIST_P256_R1: Swift.Int
  public static let PARAM_ID_ECP_BRAINPOOL_P256_R1: Swift.Int
  public static let PARAM_ID_ECP_BRAINPOOL_P320_R1: Swift.Int
  public static let PARAM_ID_ECP_NIST_P384_R1: Swift.Int
  public static let PARAM_ID_ECP_BRAINPOOL_P384_R1: Swift.Int
  public static let PARAM_ID_ECP_BRAINPOOL_P512_R1: Swift.Int
  public static let PARAM_ID_ECP_NIST_P521_R1: Swift.Int
  override public func getObjectIdentifier() -> Swift.String
  override public func getProtocolOIDString() -> Swift.String
  public func getVersion() -> Swift.Int
  public func getParameterId() -> Swift.Int?
  public func getParameterSpec() throws -> Swift.Int32
  public func getMappingType() throws -> AmaniSDK.PACEMappingType
  public func getKeyAgreementAlgorithm() throws -> Swift.String
  public func getCipherAlgorithm() throws -> Swift.String
  public func getDigestAlgorithm() throws -> Swift.String
  public func getKeyLength() throws -> Swift.Int
  public func createMappingKey() throws -> Swift.OpaquePointer
  public static func getParameterSpec(stdDomainParam: Swift.Int) throws -> Swift.Int32
  public static func toMappingType(oid: Swift.String) throws -> AmaniSDK.PACEMappingType
  public static func toKeyAgreementAlgorithm(oid: Swift.String) throws -> Swift.String
  public static func toCipherAlgorithm(oid: Swift.String) throws -> Swift.String
  public static func toDigestAlgorithm(oid: Swift.String) throws -> Swift.String
  public static func toKeyLength(oid: Swift.String) throws -> Swift.Int
  @objc deinit
}
@_hasMissingDesignatedInitializers public class IDCapture {
  public static let sharedInstance: AmaniSDK.IDCapture
  public func setType(type: Swift.String)
  public func setNFC(nfcEnabled: Swift.Bool)
  public func setManualCropTimeout(Timeout: Swift.Int)
  public func start(stepId: Swift.Int = steps.front.rawValue, completion: @escaping (UIKit.UIImage) -> Swift.Void) throws -> UIKit.UIView?
  public func upload(location: CoreLocation.CLLocation? = nil, completion: @escaping (Swift.Bool?, [AmaniSDK.AmaniError]?) -> Swift.Void)
  @available(iOS 13, *)
  public func startNFC(completion: @escaping ((Swift.Bool) -> Swift.Void))
  @available(iOS 13, *)
  public func startNFC(nvi: AmaniSDK.NviModel, completion: @escaping ((Swift.Bool) -> Swift.Void))
  @objc deinit
}
@available(iOS 13, *)
public struct ResponseAPDU {
  public var data: [Swift.UInt8]
  public var sw1: Swift.UInt8
  public var sw2: Swift.UInt8
  public init(data: [Swift.UInt8], sw1: Swift.UInt8, sw2: Swift.UInt8)
}
@_hasMissingDesignatedInitializers @available(iOS 13, macOS 10.15, *)
public class SecurityInfo {
  public func getObjectIdentifier() -> Swift.String
  public func getProtocolOIDString() -> Swift.String
  @objc deinit
}
@_hasMissingDesignatedInitializers @available(iOS 13, *)
public class TagReader {
  @objc deinit
}
public func binToHexRep(_ val: [Swift.UInt8], asArray: Swift.Bool = false) -> Swift.String
public func binToHexRep(_ val: Swift.UInt8) -> Swift.String
public func binToHex(_ val: Swift.UInt8) -> Swift.Int
public func binToHex(_ val: [Swift.UInt8]) -> Swift.UInt64
public func binToHex(_ val: Swift.ArraySlice<Swift.UInt8>) -> Swift.UInt64
public func hexToBin(_ val: Swift.UInt64) -> [Swift.UInt8]
public func binToInt(_ val: Swift.ArraySlice<Swift.UInt8>) -> Swift.Int
public func binToInt(_ val: [Swift.UInt8]) -> Swift.Int
public func intToBin(_ data: Swift.Int, pad: Swift.Int = 2) -> [Swift.UInt8]
public func hexRepToBin(_ val: Swift.String) -> [Swift.UInt8]
public func xor(_ kifd: [Swift.UInt8], _ response_kicc: [Swift.UInt8]) -> [Swift.UInt8]
public func generateRandomUInt8Array(_ size: Swift.Int) -> [Swift.UInt8]
public func pad(_ toPad: [Swift.UInt8], blockSize: Swift.Int) -> [Swift.UInt8]
public func unpad(_ tounpad: [Swift.UInt8]) -> [Swift.UInt8]
@available(iOS 13, macOS 10.15, *)
public func mac(algoName: AmaniSDK.SecureMessagingSupportedAlgorithms, key: [Swift.UInt8], msg: [Swift.UInt8]) -> [Swift.UInt8]
@available(iOS 13, macOS 10.15, *)
public func desMAC(key: [Swift.UInt8], msg: [Swift.UInt8]) -> [Swift.UInt8]
@available(iOS 13, macOS 10.15, *)
public func aesMAC(key: [Swift.UInt8], msg: [Swift.UInt8]) -> [Swift.UInt8]
@available(iOS 13, macOS 10.15, *)
public func wrapDO(b: Swift.UInt8, arr: [Swift.UInt8]) -> [Swift.UInt8]
@available(iOS 13, macOS 10.15, *)
public func unwrapDO(tag: Swift.UInt8, wrappedData: [Swift.UInt8]) throws -> [Swift.UInt8]
public func intToBytes(val: Swift.Int, removePadding: Swift.Bool) -> [Swift.UInt8]
@available(iOS 13, macOS 10.15, *)
public func oidToBytes(oid: Swift.String, replaceTag: Swift.Bool) -> [Swift.UInt8]
@available(iOS 13, macOS 10.15, *)
public func asn1Length(_ data: Swift.ArraySlice<Swift.UInt8>) throws -> (Swift.Int, Swift.Int)
@available(iOS 13, macOS 10.15, *)
public func asn1Length(_ data: [Swift.UInt8]) throws -> (Swift.Int, Swift.Int)
@available(iOS 13, macOS 10.15, *)
public func toAsn1Length(_ data: Swift.Int) throws -> [Swift.UInt8]
@available(iOS 13, macOS 10.15, *)
public func calcHash(data: [Swift.UInt8], hashAlgorithm: Swift.String) throws -> [Swift.UInt8]
@available(iOS 13, macOS 10.15, *)
public func calcSHA1Hash(_ data: [Swift.UInt8]) -> [Swift.UInt8]
@available(iOS 13, macOS 10.15, *)
public func calcSHA224Hash(_ data: [Swift.UInt8]) -> [Swift.UInt8]
@available(iOS 13, macOS 10.15, *)
public func calcSHA256Hash(_ data: [Swift.UInt8]) -> [Swift.UInt8]
@available(iOS 13, macOS 10.15, *)
public func calcSHA512Hash(_ data: [Swift.UInt8]) -> [Swift.UInt8]
@available(iOS 13, macOS 10.15, *)
public func calcSHA384Hash(_ data: [Swift.UInt8]) -> [Swift.UInt8]
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @available(iOS 13, macOS 10.15, *)
public class DataGroup2 : AmaniSDK.DataGroup {
  public var nrImages: Swift.Int {
    get
  }
  public var versionNumber: Swift.Int {
    get
  }
  public var lengthOfRecord: Swift.Int {
    get
  }
  public var numberOfFacialImages: Swift.Int {
    get
  }
  public var facialRecordDataLength: Swift.Int {
    get
  }
  public var nrFeaturePoints: Swift.Int {
    get
  }
  public var gender: Swift.Int {
    get
  }
  public var eyeColor: Swift.Int {
    get
  }
  public var hairColor: Swift.Int {
    get
  }
  public var featureMask: Swift.Int {
    get
  }
  public var expression: Swift.Int {
    get
  }
  public var poseAngle: Swift.Int {
    get
  }
  public var poseAngleUncertainty: Swift.Int {
    get
  }
  public var faceImageType: Swift.Int {
    get
  }
  public var imageDataType: Swift.Int {
    get
  }
  public var imageWidth: Swift.Int {
    get
  }
  public var imageHeight: Swift.Int {
    get
  }
  public var imageColorSpace: Swift.Int {
    get
  }
  public var sourceType: Swift.Int {
    get
  }
  public var deviceType: Swift.Int {
    get
  }
  public var quality: Swift.Int {
    get
  }
  public var imageData: [Swift.UInt8] {
    get
  }
  @objc deinit
}
public struct CustomerDetailModel : Swift.Codable {
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
@_hasMissingDesignatedInitializers public class Document {
  public static let sharedInstance: AmaniSDK.Document
  public func setType(type: Swift.String)
  public func start(stepId: Swift.Int = 0, completion: @escaping (UIKit.UIImage) -> Swift.Void) throws -> UIKit.UIView?
  public func upload(location: CoreLocation.CLLocation? = nil, completion: @escaping (Swift.Bool?, [AmaniSDK.AmaniError]?) -> Swift.Void)
  public func upload(location: CoreLocation.CLLocation?, files: [AmaniSDK.FileWithType], completion: @escaping (Swift.Bool?, [AmaniSDK.AmaniError]?) -> Swift.Void)
  @objc deinit
}
public typealias failedAttemptCallback = (Swift.Int) -> Swift.Void
extension AmaniSDK.LogLevel : Swift.Equatable {}
extension AmaniSDK.LogLevel : Swift.Hashable {}
extension AmaniSDK.LogLevel : Swift.RawRepresentable {}
extension AmaniSDK.acceptedFileTypes : Swift.Equatable {}
extension AmaniSDK.acceptedFileTypes : Swift.Hashable {}
extension AmaniSDK.acceptedFileTypes : Swift.RawRepresentable {}
extension AmaniSDK.steps : Swift.Equatable {}
extension AmaniSDK.steps : Swift.Hashable {}
extension AmaniSDK.steps : Swift.RawRepresentable {}
@available(iOS 13, macOS 10.15, *)
extension AmaniSDK.CertificateType : Swift.Equatable {}
@available(iOS 13, macOS 10.15, *)
extension AmaniSDK.CertificateType : Swift.Hashable {}
@available(iOS 13, macOS 10.15, *)
extension AmaniSDK.CertificateItem : Swift.Equatable {}
@available(iOS 13, macOS 10.15, *)
extension AmaniSDK.CertificateItem : Swift.Hashable {}
@available(iOS 13, macOS 10.15, *)
extension AmaniSDK.CertificateItem : Swift.RawRepresentable {}
extension AmaniSDK.UploadSource : Swift.Equatable {}
extension AmaniSDK.UploadSource : Swift.Hashable {}
extension AmaniSDK.UploadSource : Swift.RawRepresentable {}
extension AmaniSDK.SignDocument.HMACAlgo : Swift.Equatable {}
extension AmaniSDK.SignDocument.HMACAlgo : Swift.Hashable {}
extension AmaniSDK.SecureMessagingSupportedAlgorithms : Swift.Equatable {}
extension AmaniSDK.SecureMessagingSupportedAlgorithms : Swift.Hashable {}
extension AmaniSDK.infoState : Swift.Equatable {}
extension AmaniSDK.infoState : Swift.Hashable {}
extension AmaniSDK.infoState : Swift.RawRepresentable {}
extension AmaniSDK.configState : Swift.Equatable {}
extension AmaniSDK.configState : Swift.Hashable {}
extension AmaniSDK.configState : Swift.RawRepresentable {}
extension AmaniSDK.DocumentStatus : Swift.Equatable {}
extension AmaniSDK.DocumentStatus : Swift.Hashable {}
extension AmaniSDK.DocumentStatus : Swift.RawRepresentable {}
extension AmaniSDK.poseState : Swift.Equatable {}
extension AmaniSDK.poseState : Swift.Hashable {}
extension AmaniSDK.poseState : Swift.RawRepresentable {}
extension AmaniSDK.poseConfigState : Swift.Equatable {}
extension AmaniSDK.poseConfigState : Swift.Hashable {}
extension AmaniSDK.poseConfigState : Swift.RawRepresentable {}
extension AmaniSDK.mainGuideImages : Swift.Equatable {}
extension AmaniSDK.mainGuideImages : Swift.Hashable {}
extension AmaniSDK.secondaryGuideImages : Swift.Equatable {}
extension AmaniSDK.secondaryGuideImages : Swift.Hashable {}
@available(iOS 13, macOS 10.15, *)
extension AmaniSDK.DocTypeEnum : Swift.Equatable {}
@available(iOS 13, macOS 10.15, *)
extension AmaniSDK.DocTypeEnum : Swift.Hashable {}
@available(iOS 13, macOS 10.15, *)
extension AmaniSDK.DocTypeEnum : Swift.RawRepresentable {}
extension AmaniSDK.PassportAuthenticationStatus : Swift.Equatable {}
extension AmaniSDK.PassportAuthenticationStatus : Swift.Hashable {}
extension AmaniSDK.DocumentTypes : Swift.Equatable {}
extension AmaniSDK.DocumentTypes : Swift.Hashable {}
extension AmaniSDK.DocumentTypes : Swift.RawRepresentable {}
extension AmaniSDK.BioLoginType : Swift.Equatable {}
extension AmaniSDK.BioLoginType : Swift.Hashable {}
extension AmaniSDK.BioLoginType : Swift.RawRepresentable {}
@available(iOS 13, macOS 10.15, *)
extension AmaniSDK.DataGroupId : Swift.Equatable {}
@available(iOS 13, macOS 10.15, *)
extension AmaniSDK.DataGroupId : Swift.Hashable {}
@available(iOS 13, macOS 10.15, *)
extension AmaniSDK.DataGroupId : Swift.RawRepresentable {}
extension AmaniSDK.PACEMappingType : Swift.Equatable {}
extension AmaniSDK.PACEMappingType : Swift.Hashable {}
